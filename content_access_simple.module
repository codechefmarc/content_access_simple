<?php

use Drupal\Core\Cache\Cache;
use Drupal\Core\Entity\Entity\EntityFormDisplay;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_theme().
 */
function content_access_simple_theme($existing, $type, $theme, $path) {
  return [
    'unpublished_message' => [
      'variables' => [
        'roles_view_unpublished' => [],
        'content_type' => NULL,
      ],
    ],
    'complex_message' => [
      'variables' => [],
    ],
  ];
}

/**
 * Implements hook_entity_extra_field_info().
 */
function content_access_simple_entity_extra_field_info() {
  $extra = [];

  if (\Drupal::service('module_handler')->moduleExists('node')) {
    $node_types = \Drupal::entityTypeManager()
      ->getStorage('node_type')
      ->loadMultiple();

    foreach ($node_types as $node_type) {
      $extra['node'][$node_type->id()]['form']['content_access_simple'] = [
        'label' => t('Content Access Simple'),
        'description' => t('Simpler way to change view permissions per node'),
        'weight' => 50,
      ];
    }
  }

  return $extra;
}

/**
 * Implements hook_form_node_form_alter().
 */
function content_access_simple_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  /** @var \Drupal\node\NodeForm $form_object */
  $form_object = $form_state->getFormObject();

  /** @var \Drupal\node\Entity\Node $node */
  $node = $form_object->getEntity();
  $bundle = $node->bundle();

  $form_display = EntityFormDisplay::load('node.' . $bundle . '.default');

  // If the display of our custom field is not enabled, return.
  if (!$form_display || !$form_display->getComponent('content_access_simple')) {
    return;
  }

  // Get the access manager service.
  /** @var \Drupal\content_access_simple\AccessManager $access_manager */
  $access_manager = \Drupal::service('content_access_simple.access_manager');

  // Checks permissions as well as if per-node Content Access is enabled.
  if ($access_manager->hasAccess($node)) {

    // Add the content access form elements.
    $access_manager->addAccessFormElements($form, $node);

    // If this is complex, no need to add a custom submit handler.
    if ($access_manager->isComplex($node)) {
      return;
    }

    // Add submit handler to node form.
    foreach (array_keys($form['actions']) as $action) {
      if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
        $form['actions'][$action]['#submit'][] = 'content_access_simple_node_form_submit';
      }
    }
  }
}

/**
 * Submit callback for node_form.
 *
 * @see content_access_simple_form_node_form_alter().
 */
function content_access_simple_node_form_submit($form, FormStateInterface $form_state) {
  $access_manager = \Drupal::service('content_access_simple.access_manager');

  /** @var \Drupal\node\NodeForm $formObject */
  $formObject = $form_state->getFormObject();

  /** @var \Drupal\node\Entity\Node $node */
  $node = $formObject->getEntity();

  // Gets original settings from Content Access module.
  $origSettings = content_access_get_per_node_settings($node) ?: content_access_get_settings('all', $node->getType());

  // Gets our settings to update (view only).
  $viewAccess = $form_state->getValue('view');

  $newViewSettings = [];
  foreach ($viewAccess as $key => $role) {
    if ($viewAccess[$key]) {
      $newViewSettings[] = $key;
    }
  }

  // Add back in the hidden roles so they also get processed.
  $hiddenRoles = $access_manager->getHiddenRoles();
  foreach ($hiddenRoles as $hiddenRole) {
    if (in_array($hiddenRole, $origSettings['view'])) {
      $newViewSettings[] = $hiddenRole;
    }
  }

  $origSettings['view'] = $newViewSettings;

  // Update Content Access settings.
  // The following is copied and modified from Content Access.
  // @see content_access/src/Form/ContentAccessPageForm.php
  $entityTypeManager = \Drupal::service('entity_type.manager');
  $grantStorage = \Drupal::service('node.grant_storage');
  $moduleHandler = \Drupal::service('module_handler');

  content_access_save_per_node_settings($node, $origSettings);

  $grants = $entityTypeManager->getAccessControlHandler('node')->acquireGrants($node);
  $grantStorage->write($node, $grants);
  $moduleHandler->invokeAll('per_node', [$origSettings, $node]);

  foreach (Cache::getBins() as $cache_backend) {
    $cache_backend->deleteAll();
  }

  // End updating Content Access settings.
}
